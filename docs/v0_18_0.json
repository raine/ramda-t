[
  {
    "args": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "name": "always",
    "returns": [
      "Function"
    ],
    "sig": "a -> (* -> a)",
    "description": "Returns a function that always returns the given value. Note that for\nnon-primitives the value returned is a reference to the original value.\n\nThis function is known as `const`, `constant`, or `K` (for K combinator)\nin other languages and libraries."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "args",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "apply",
    "returns": [
      "*"
    ],
    "sig": "(*... -> a) -> [*] -> a",
    "description": "Applies function `fn` to the argument list `args`. This is useful for\ncreating a fixed-arity function from a variadic function. `fn` should\nbe a bound function if context is significant."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "thisObj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "bind",
    "returns": [
      "Function"
    ],
    "sig": "(* -> *) -> {*} -> (* -> *)",
    "description": "Creates a function that is bound to a context.\nNote: `R.bind` does not provide the additional argument-binding capabilities of\n[Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind)."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "comparator",
    "returns": [
      "Function"
    ],
    "sig": "(a, b -> Boolean) -> (a, b -> Number)",
    "description": "Makes a comparator function out of a function that reports whether the first element is less than the second."
  },
  {
    "args": [
      {
        "name": "length",
        "types": [
          "Number"
        ]
      },
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "curryN",
    "returns": [
      "Function"
    ],
    "sig": "Number -> (* -> a) -> (* -> a)",
    "description": "Returns a curried equivalent of the provided function, with the\nspecified arity. The curried function has two unusual capabilities.\nFirst, its arguments needn't be provided one at a time. If `g` is\n`R.curryN(3, f)`, the following are equivalent:\n\n  - `g(1)(2)(3)`\n  - `g(1)(2, 3)`\n  - `g(1, 2)(3)`\n  - `g(1, 2, 3)`\n\nSecondly, the special placeholder value `R.__` may be used to specify\n\"gaps\", allowing partial application of any combination of arguments,\nregardless of their positions. If `g` is as above and `_` is `R.__`,\nthe following are equivalent:\n\n  - `g(1, 2, 3)`\n  - `g(_, 2, 3)(1)`\n  - `g(_, _, 3)(1)(2)`\n  - `g(_, _, 3)(1, 2)`\n  - `g(_, 2)(1)(3)`\n  - `g(_, 2)(1, 3)`\n  - `g(_, 2)(_, 3)(1)`"
  },
  {
    "args": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "empty",
    "returns": [
      "*"
    ],
    "sig": "a -> a",
    "description": "Returns the empty value of its argument's type. Ramda defines the empty\nvalue of Array (`[]`), Object (`{}`), String (`''`), and Arguments.\nOther types are supported if they define `<Type>.empty` and/or\n`<Type>.prototype.empty`.\n\nDispatches to the `empty` method of the first argument, if present."
  },
  {
    "args": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "identity",
    "returns": [
      "*"
    ],
    "sig": "a -> a",
    "description": "A function that does nothing but return the parameter supplied to it. Good as a default\nor placeholder function."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      },
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "nAry",
    "returns": [
      "Function"
    ],
    "sig": "Number -> (* -> a) -> (* -> a)",
    "description": "Wraps a function of any arity (including nullary) in a function that accepts exactly `n`\nparameters. Any extraneous parameters will not be passed to the supplied function."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "nthArg",
    "returns": [
      "Function"
    ],
    "sig": "Number -> *... -> *",
    "description": "Returns a function which returns its nth argument."
  },
  {
    "args": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "of",
    "returns": [
      "Array"
    ],
    "sig": "a -> [a]",
    "description": "Returns a singleton array containing the value provided.\n\nNote this `of` is different from the ES6 `of`; See\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of"
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "once",
    "returns": [
      "Function"
    ],
    "sig": "(a... -> b) -> (a... -> b)",
    "description": "Accepts a function `fn` and returns a function that guards invocation of `fn` such that\n`fn` can only ever be called once, no matter how many times the returned function is\ninvoked. The first value calculated is returned in subsequent invocations."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "tap",
    "returns": [
      "*"
    ],
    "sig": "(a -> *) -> a -> a",
    "description": "Runs the given function with the supplied object, then returns the object."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "unapply",
    "returns": [
      "Function"
    ],
    "sig": "([*...] -> a) -> (*... -> a)",
    "description": "Takes a function `fn`, which takes a single array argument, and returns\na function which:\n\n  - takes any number of positional arguments;\n  - passes these arguments to `fn` as an array; and\n  - returns the result.\n\nIn other words, R.unapply derives a variadic function from a function\nwhich takes an array. R.unapply is the inverse of R.apply."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "unary",
    "returns": [
      "Function"
    ],
    "sig": "(* -> b) -> (a -> b)",
    "description": "Wraps a function of any arity (including nullary) in a function that accepts exactly 1\nparameter. Any extraneous parameters will not be passed to the supplied function."
  },
  {
    "args": [
      {
        "name": "length",
        "types": [
          "Number"
        ]
      },
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "uncurryN",
    "returns": [
      "Function"
    ],
    "sig": "Number -> (a -> b) -> (a -> c)",
    "description": "Returns a function of arity `n` from a (manually) curried function."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "wrapper",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "wrap",
    "returns": [
      "Function"
    ],
    "sig": "(a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)",
    "description": "Wrap a function inside another to allow you to make adjustments to the parameters, or do\nother processing either before the internal function is called or with its results."
  },
  {
    "args": [
      {
        "types": [
          "*"
        ]
      }
    ],
    "name": "F",
    "returns": [
      "Boolean"
    ],
    "sig": "* -> Boolean",
    "description": "A function that always returns `false`. Any passed in parameters are ignored."
  },
  {
    "args": [
      {
        "types": [
          "*"
        ]
      }
    ],
    "name": "T",
    "returns": [
      "Boolean"
    ],
    "sig": "* -> Boolean",
    "description": "A function that always returns `true`. Any passed in parameters are ignored."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "addIndex",
    "returns": [
      "Function"
    ],
    "sig": "((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)",
    "description": "Creates a new list iteration function from an existing one by adding two new parameters\nto its callback function: the current index, and the entire list.\n\nThis would turn, for instance, Ramda's simple `map` function into one that more closely\nresembles `Array.prototype.map`.  Note that this will only work for functions in which\nthe iteration callback function is the first parameter, and where the list is the last\nparameter.  (This latter might be unimportant if the list parameter is not used.)"
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "binary",
    "returns": [
      "Function"
    ],
    "sig": "(* -> c) -> (a, b -> c)",
    "description": "Wraps a function of any arity (including nullary) in a function that accepts exactly 2\nparameters. Any extraneous parameters will not be passed to the supplied function."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "curry",
    "returns": [
      "Function"
    ],
    "sig": "(* -> a) -> (* -> a)",
    "description": "Returns a curried equivalent of the provided function. The curried\nfunction has two unusual capabilities. First, its arguments needn't\nbe provided one at a time. If `f` is a ternary function and `g` is\n`R.curry(f)`, the following are equivalent:\n\n  - `g(1)(2)(3)`\n  - `g(1)(2, 3)`\n  - `g(1, 2)(3)`\n  - `g(1, 2, 3)`\n\nSecondly, the special placeholder value `R.__` may be used to specify\n\"gaps\", allowing partial application of any combination of arguments,\nregardless of their positions. If `g` is as above and `_` is `R.__`,\nthe following are equivalent:\n\n  - `g(1, 2, 3)`\n  - `g(_, 2, 3)(1)`\n  - `g(_, _, 3)(1)(2)`\n  - `g(_, _, 3)(1, 2)`\n  - `g(_, 2)(1)(3)`\n  - `g(_, 2)(1, 3)`\n  - `g(_, 2)(_, 3)(1)`"
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "flip",
    "returns": [
      "*"
    ],
    "sig": "(a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)",
    "description": "Returns a new function much like the supplied one, except that the first two arguments'\norder is reversed."
  },
  {
    "args": [
      {
        "name": "f",
        "types": [
          "Function"
        ]
      },
      {
        "name": "args",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "partial",
    "returns": [
      "Function"
    ],
    "sig": "((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)",
    "description": "Takes a function `f` and a list of arguments, and returns a function `g`.\nWhen applied, `g` returns the result of applying `f` to the arguments\nprovided initially followed by the arguments provided to `g`."
  },
  {
    "args": [
      {
        "name": "f",
        "types": [
          "Function"
        ]
      },
      {
        "name": "args",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "partialRight",
    "returns": [
      "Function"
    ],
    "sig": "((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)",
    "description": "Takes a function `f` and a list of arguments, and returns a function `g`.\nWhen applied, `g` returns the result of applying `f` to the arguments\nprovided to `g` followed by the arguments provided initially."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "transformers",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "useWith",
    "returns": [
      "Function"
    ],
    "sig": "(x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)",
    "description": "Accepts a function `fn` and a list of transformer functions and returns a new curried\nfunction. When the new function is invoked, it calls the function `fn` with parameters\nconsisting of the result of calling each supplied handler on successive arguments to the\nnew function.\n\nIf more arguments are passed to the returned function than transformer functions, those\narguments are passed directly to `fn` as additional parameters. If you expect additional\narguments that don't need to be transformed, although you can ignore them, it's best to\npass an identity function so that the new function reports the correct arity."
  },
  {
    "args": [
      {
        "name": "fns",
        "types": [
          "Array"
        ]
      },
      {
        "name": "vs",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "ap",
    "returns": [
      "Array"
    ],
    "sig": "[f] -> [a] -> [f a]",
    "description": "ap applies a list of functions to a list of values.\n\nDispatches to the `ap` method of the second argument, if present. Also treats\nfunctions as applicatives."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ],
        "variable": true
      }
    ],
    "name": "call",
    "returns": [
      "*"
    ],
    "sig": "(*... -> a),*... -> a",
    "description": "Returns the result of calling its first argument with the remaining\narguments. This is occasionally useful as a converging function for\n`R.converge`: the left branch can produce a function while the right\nbranch produces a value to be passed to that function as an argument."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      },
      {
        "name": "Fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "constructN",
    "returns": [
      "Function"
    ],
    "sig": "Number -> (* -> {*}) -> (* -> {*})",
    "description": "Wraps a constructor function inside a curried function that can be called with the same\narguments and returns the same type. The arity of the function returned is specified\nto allow using variadic constructor functions."
  },
  {
    "args": [
      {
        "name": "after",
        "types": [
          "Function"
        ]
      },
      {
        "name": "functions",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "converge",
    "returns": [
      "Function"
    ],
    "sig": "(x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)",
    "description": "Accepts a converging function and a list of branching functions and returns a new function.\nWhen invoked, this new function is applied to some arguments, each branching\nfunction is applied to those same arguments. The results of each branching\nfunction are passed as arguments to the converging function to produce the return value."
  },
  {
    "args": [
      {
        "name": "arity",
        "types": [
          "Number"
        ]
      },
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "liftN",
    "returns": [
      "Function"
    ],
    "sig": "Number -> (*... -> *) -> ([*]... -> [*])",
    "description": "\"lifts\" a function to be the specified arity, so that it may \"map over\" that many\nlists (or other Functors)."
  },
  {
    "args": [
      {
        "name": "functions",
        "types": [
          "Function"
        ],
        "variable": true
      }
    ],
    "name": "pipe",
    "returns": [
      "Function"
    ],
    "sig": "(((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)",
    "description": "Performs left-to-right function composition. The leftmost function may have\nany arity; the remaining functions must be unary.\n\nIn some libraries this function is named `sequence`."
  },
  {
    "args": [
      {
        "name": "functions",
        "types": [
          "Function"
        ],
        "variable": true
      }
    ],
    "name": "pipeP",
    "returns": [
      "Function"
    ],
    "sig": "((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)",
    "description": "Performs left-to-right composition of one or more Promise-returning\nfunctions. The leftmost function may have any arity; the remaining\nfunctions must be unary."
  },
  {
    "args": [
      {
        "name": "functions",
        "types": [
          "Function"
        ],
        "variable": true
      }
    ],
    "name": "compose",
    "returns": [
      "Function"
    ],
    "sig": "((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)",
    "description": "Performs right-to-left function composition. The rightmost function may have\nany arity; the remaining functions must be unary."
  },
  {
    "args": [
      {
        "types": [
          "Function"
        ],
        "variable": true
      }
    ],
    "name": "composeK",
    "returns": [
      "Function"
    ],
    "sig": "Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)",
    "description": "Returns the right-to-left Kleisli composition of the provided functions,\neach of which must return a value of a type supported by [`chain`](#chain).\n\n`R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`."
  },
  {
    "args": [
      {
        "name": "functions",
        "types": [
          "Function"
        ],
        "variable": true
      }
    ],
    "name": "composeP",
    "returns": [
      "Function"
    ],
    "sig": "((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)",
    "description": "Performs right-to-left composition of one or more Promise-returning\nfunctions. The rightmost function may have any arity; the remaining\nfunctions must be unary."
  },
  {
    "args": [
      {
        "name": "Fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "construct",
    "returns": [
      "Function"
    ],
    "sig": "(* -> {*}) -> (* -> {*})",
    "description": "Wraps a constructor function inside a curried function that can be called with the same\narguments and returns the same type."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "lift",
    "returns": [
      "Function"
    ],
    "sig": "(*... -> *) -> ([*]... -> [*])",
    "description": "\"lifts\" a function of arity > 1 so that it may \"map over\" an Array or\nother Functor."
  },
  {
    "args": [
      {
        "types": [
          "Function"
        ],
        "variable": true
      }
    ],
    "name": "pipeK",
    "returns": [
      "Function"
    ],
    "sig": "Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)",
    "description": "Returns the left-to-right Kleisli composition of the provided functions,\neach of which must return a value of a type supported by [`chain`](#chain).\n\n`R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`."
  },
  {
    "args": [
      {
        "name": "arity",
        "types": [
          "Number"
        ]
      },
      {
        "name": "method",
        "types": [
          "String"
        ]
      }
    ],
    "name": "invoker",
    "returns": [
      "Function"
    ],
    "sig": "Number -> String -> (a -> b -> ... -> n -> Object -> *)",
    "description": "Turns a named method with a specified arity into a function\nthat can be called directly supplied with arguments and a target object.\n\nThe returned function is curried and accepts `arity + 1` parameters where\nthe final parameter is the target object."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "memoize",
    "returns": [
      "Function"
    ],
    "sig": "(*... -> a) -> (*... -> a)",
    "description": "Creates a new function that, when invoked, caches the result of calling `fn` for a given\nargument set and returns the result. Subsequent calls to the memoized `fn` with the same\nargument set will not result in an additional call to `fn`; instead, the cached result\nfor that set of arguments will be returned."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "idx",
        "types": [
          "Number"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array",
          "Arguments"
        ]
      }
    ],
    "name": "adjust",
    "returns": [
      "Array"
    ],
    "sig": "(a -> a) -> Number -> [a] -> [a]",
    "description": "Applies a function to the value at the given index of an array,\nreturning a new copy of the array with the element at the given\nindex replaced with the result of the function application."
  },
  {
    "args": [
      {
        "name": "el",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "append",
    "returns": [
      "Array"
    ],
    "sig": "a -> [a] -> [a]",
    "description": "Returns a new list containing the contents of the given list, followed by the given\nelement."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "containsWith",
    "returns": [
      "Boolean"
    ],
    "sig": "(a, a -> Boolean) -> a -> [a] -> Boolean",
    "description": "Returns `true` if the `x` is found in the `list`, using `pred` as an\nequality predicate for `x`."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "dropLastWhile",
    "returns": [
      "Array"
    ],
    "sig": "(a -> Boolean) -> [a] -> [a]",
    "description": "Returns a new list containing all but last the`n` elements of a given list,\npassing each value from the right to the supplied predicate function, skipping\nelements while the predicate function returns `true`. The predicate function\nis passed one argument: (value)*.\n\nDispatches to the `dropLast` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "pairs",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "fromPairs",
    "returns": [
      "Object"
    ],
    "sig": "[[k,v]] -> {k: v}",
    "description": "Creates a new object out of a list key-value pairs."
  },
  {
    "args": [
      {
        "name": "index",
        "types": [
          "Number"
        ]
      },
      {
        "name": "elt",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "insert",
    "returns": [
      "Array"
    ],
    "sig": "Number -> a -> [a] -> [a]",
    "description": "Inserts the supplied element into the list, at index `index`.  _Note\nthat this is not destructive_: it returns a copy of the list with the changes.\n<small>No lists have been harmed in the application of this function.</small>"
  },
  {
    "args": [
      {
        "name": "index",
        "types": [
          "Number"
        ]
      },
      {
        "name": "elts",
        "types": [
          "Array"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "insertAll",
    "returns": [
      "Array"
    ],
    "sig": "Number -> [a] -> [a] -> [a]",
    "description": "Inserts the sub-list into the list, at index `index`.  _Note  that this\nis not destructive_: it returns a copy of the list with the changes.\n<small>No lists have been harmed in the application of this function.</small>"
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "name": "length",
    "returns": [
      "Number"
    ],
    "sig": "[a] -> Number",
    "description": "Returns the length of an `Array`, `String`, or arity in case of a `Function`."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "acc",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "mapAccum",
    "returns": [
      "*"
    ],
    "sig": "(acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])",
    "description": "The mapAccum function behaves like a combination of map and reduce; it applies a\nfunction to each element of a list, passing an accumulating parameter from left to\nright, and returning a final value of this accumulator together with the new list.\n\nThe iterator function receives two arguments, *acc* and *value*, and should return\na tuple *[acc, value]*."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "acc",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "mapAccumRight",
    "returns": [
      "*"
    ],
    "sig": "(acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])",
    "description": "The mapAccumRight function behaves like a combination of map and reduce; it applies a\nfunction to each element of a list, passing an accumulating parameter from right\nto left, and returning a final value of this accumulator together with the new list.\n\nSimilar to `mapAccum`, except moves through the input list from the right to the\nleft.\n\nThe iterator function receives two arguments, *acc* and *value*, and should return\na tuple *[acc, value]*."
  },
  {
    "args": [
      {
        "name": "offset",
        "types": [
          "Number"
        ]
      },
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "name": "nth",
    "returns": [
      "*"
    ],
    "sig": "Number -> [a] -> a | Undefined",
    "description": "Returns the nth element of the given list or string.\nIf n is negative the element at index length + n is returned."
  },
  {
    "args": [
      {
        "name": "fst",
        "types": [
          "*"
        ]
      },
      {
        "name": "snd",
        "types": [
          "*"
        ]
      }
    ],
    "name": "pair",
    "returns": [
      "Array"
    ],
    "sig": "a -> b -> (a,b)",
    "description": "Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`."
  },
  {
    "args": [
      {
        "name": "el",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "prepend",
    "returns": [
      "Array"
    ],
    "sig": "a -> [a] -> [a]",
    "description": "Returns a new list with the given element at the front, followed by the contents of the\nlist."
  },
  {
    "args": [
      {
        "name": "from",
        "types": [
          "Number"
        ]
      },
      {
        "name": "to",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "range",
    "returns": [
      "Array"
    ],
    "sig": "Number -> Number -> [Number]",
    "description": "Returns a list of numbers from `from` (inclusive) to `to`\n(exclusive)."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "acc",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "reduceRight",
    "returns": [
      "*"
    ],
    "sig": "(a,b -> a) -> a -> [b] -> a",
    "description": "Returns a single item by iterating through the list, successively calling the iterator\nfunction and passing it an accumulator value and the current value from the array, and\nthen passing the result to the next call.\n\nSimilar to `reduce`, except moves through the input list from the right to the left.\n\nThe iterator function receives two values: *(acc, value)*\n\nNote: `R.reduceRight` does not skip deleted or unassigned indices (sparse arrays), unlike\nthe native `Array.prototype.reduce` method. For more details on this behavior, see:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description"
  },
  {
    "args": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "reduced",
    "returns": [
      "*"
    ],
    "sig": "a -> *",
    "description": "Returns a value wrapped to indicate that it is the final value of the\nreduce and transduce functions.  The returned value\nshould be considered a black box: the internal structure is not\nguaranteed to be stable.\n\nNote: this optimization is unavailable to functions not explicitly listed\nabove.  For instance, it is not currently supported by reduceIndexed,\nreduceRight, or reduceRightIndexed."
  },
  {
    "args": [
      {
        "name": "start",
        "types": [
          "Number"
        ]
      },
      {
        "name": "count",
        "types": [
          "Number"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "remove",
    "returns": [
      "Array"
    ],
    "sig": "Number -> Number -> [a] -> [a]",
    "description": "Removes the sub-list of `list` starting at index `start` and containing\n`count` elements.  _Note that this is not destructive_: it returns a\ncopy of the list with the changes.\n<small>No lists have been harmed in the application of this function.</small>"
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array",
          "String"
        ]
      }
    ],
    "name": "reverse",
    "returns": [
      "Array",
      "String"
    ],
    "sig": "[a] -> [a]",
    "description": "Returns a new list or string with the elements or characters in reverse\norder."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "acc",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "scan",
    "returns": [
      "Array"
    ],
    "sig": "(a,b -> a) -> a -> [b] -> [a]",
    "description": "Scan is similar to reduce, but returns a list of successively reduced values from the left"
  },
  {
    "args": [
      {
        "name": "comparator",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "sort",
    "returns": [
      "Array"
    ],
    "sig": "(a,a -> Number) -> [a] -> [a]",
    "description": "Returns a copy of the list, sorted according to the comparator function, which should accept two values at a\ntime and return a negative number if the first value is smaller, a positive number if it's larger, and zero\nif they are equal.  Please note that this is a **copy** of the list.  It does not modify the original."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "takeLastWhile",
    "returns": [
      "Array"
    ],
    "sig": "(a -> Boolean) -> [a] -> [a]",
    "description": "Returns a new list containing the last `n` elements of a given list, passing each value\nto the supplied predicate function, and terminating when the predicate function returns\n`false`. Excludes the element that caused the predicate function to fail. The predicate\nfunction is passed one argument: *(value)*."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "n",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "times",
    "returns": [
      "Array"
    ],
    "sig": "(i -> a) -> i -> [a]",
    "description": "Calls an input function `n` times, returning an array containing the results of those\nfunction calls.\n\n`fn` is passed one argument: The current value of `n`, which begins at `0` and is\ngradually incremented to `n - 1`."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "seed",
        "types": [
          "*"
        ]
      }
    ],
    "name": "unfold",
    "returns": [
      "Array"
    ],
    "sig": "(a -> [b]) -> * -> [b]",
    "description": "Builds a list from a seed value. Accepts an iterator function, which returns either false\nto stop iteration or an array of length 2 containing the value to add to the resulting\nlist and the seed to be used in the next call to the iterator function.\n\nThe iterator function receives one argument: *(seed)*."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "uniqWith",
    "returns": [
      "Array"
    ],
    "sig": "(a, a -> Boolean) -> [a] -> [a]",
    "description": "Returns a new list containing only one copy of each element in the original list, based\nupon the value returned by applying the supplied predicate to two list elements. Prefers\nthe first item if two items compare equal based on the predicate."
  },
  {
    "args": [
      {
        "name": "idx",
        "types": [
          "Number"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array",
          "Arguments"
        ]
      }
    ],
    "name": "update",
    "returns": [
      "Array"
    ],
    "sig": "Number -> a -> [a] -> [a]",
    "description": "Returns a new copy of the array with the element at the\nprovided index replaced with the given value."
  },
  {
    "args": [
      {
        "name": "as",
        "types": [
          "Array"
        ]
      },
      {
        "name": "bs",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "xprod",
    "returns": [
      "Array"
    ],
    "sig": "[a] -> [b] -> [[a,b]]",
    "description": "Creates a new list out of the two supplied by creating each possible\npair from the lists."
  },
  {
    "args": [
      {
        "name": "list1",
        "types": [
          "Array"
        ]
      },
      {
        "name": "list2",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "zip",
    "returns": [
      "Array"
    ],
    "sig": "[a] -> [b] -> [[a,b]]",
    "description": "Creates a new list out of the two supplied by pairing up\nequally-positioned items from both lists.  The returned list is\ntruncated to the length of the shorter of the two input lists.\nNote: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`."
  },
  {
    "args": [
      {
        "name": "keys",
        "types": [
          "Array"
        ]
      },
      {
        "name": "values",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "zipObj",
    "returns": [
      "Object"
    ],
    "sig": "[String] -> [*] -> {String: *}",
    "description": "Creates a new object out of a list of keys and a list of values."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list1",
        "types": [
          "Array"
        ]
      },
      {
        "name": "list2",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "zipWith",
    "returns": [
      "Array"
    ],
    "sig": "(a,b -> c) -> [a] -> [b] -> [c]",
    "description": "Creates a new list out of the two supplied by applying the function to\neach equally-positioned pair in the lists. The returned list is\ntruncated to the length of the shorter of the two input lists."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "all",
    "returns": [
      "Boolean"
    ],
    "sig": "(a -> Boolean) -> [a] -> Boolean",
    "description": "Returns `true` if all elements of the list match the predicate, `false` if there are any\nthat don't.\n\nDispatches to the `all` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "any",
    "returns": [
      "Boolean"
    ],
    "sig": "(a -> Boolean) -> [a] -> Boolean",
    "description": "Returns `true` if at least one of elements of the list match the predicate, `false`\notherwise.\n\nDispatches to the `any` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "aperture",
    "returns": [
      "Array"
    ],
    "sig": "Number -> [a] -> [[a]]",
    "description": "Returns a new list, composed of n-tuples of consecutive elements\nIf `n` is greater than the length of the list, an empty list is returned.\n\nDispatches to the `aperture` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "dropWhile",
    "returns": [
      "Array"
    ],
    "sig": "(a -> Boolean) -> [a] -> [a]",
    "description": "Returns a new list containing the last `n` elements of a given list, passing each value\nto the supplied predicate function, skipping elements while the predicate function returns\n`true`. The predicate function is passed one argument: *(value)*.\n\nDispatches to the `dropWhile` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "filter",
    "returns": [
      "Array"
    ],
    "sig": "(a -> Boolean) -> [a] -> [a]",
    "description": "Returns a new list containing only those items that match a given predicate function.\nThe predicate function is passed one argument: *(value)*.\n\nNote that `R.filter` does not skip deleted or unassigned indices, unlike the native\n`Array.prototype.filter` method. For more details on this behavior, see:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Description\n\nDispatches to the `filter` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "find",
    "returns": [
      "Object"
    ],
    "sig": "(a -> Boolean) -> [a] -> a | undefined",
    "description": "Returns the first element of the list which matches the predicate, or `undefined` if no\nelement matches.\n\nDispatches to the `find` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "findIndex",
    "returns": [
      "Number"
    ],
    "sig": "(a -> Boolean) -> [a] -> Number",
    "description": "Returns the index of the first element of the list which matches the predicate, or `-1`\nif no element matches.\n\nDispatches to the `findIndex` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "findLast",
    "returns": [
      "Object"
    ],
    "sig": "(a -> Boolean) -> [a] -> a | undefined",
    "description": "Returns the last element of the list which matches the predicate, or `undefined` if no\nelement matches.\n\nDispatches to the `findLast` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "findLastIndex",
    "returns": [
      "Number"
    ],
    "sig": "(a -> Boolean) -> [a] -> Number",
    "description": "Returns the index of the last element of the list which matches the predicate, or\n`-1` if no element matches.\n\nDispatches to the `findLastIndex` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "flatten",
    "returns": [
      "Array"
    ],
    "sig": "[a] -> [b]",
    "description": "Returns a new list by pulling every item out of it (and all its sub-arrays) and putting\nthem in a new array, depth-first."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "forEach",
    "returns": [
      "Array"
    ],
    "sig": "(a -> *) -> [a] -> [a]",
    "description": "Iterate over an input `list`, calling a provided function `fn` for each element in the\nlist.\n\n`fn` receives one argument: *(value)*.\n\nNote: `R.forEach` does not skip deleted or unassigned indices (sparse arrays), unlike\nthe native `Array.prototype.forEach` method. For more details on this behavior, see:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n\nAlso note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns the original\narray. In some libraries this function is named `each`.\n\nDispatches to the `forEach` method of the second argument, if present."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "groupBy",
    "returns": [
      "Object"
    ],
    "sig": "(a -> String) -> [a] -> {String: [a]}",
    "description": "Splits a list into sub-lists stored in an object, based on the result of calling a String-returning function\non each element, and grouping the results according to values returned.\n\nDispatches to the `groupBy` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "name": "head",
    "returns": [
      "*"
    ],
    "sig": "[a] -> a | Undefined",
    "description": "Returns the first element of the given list or string. In some libraries\nthis function is named `first`."
  },
  {
    "args": [
      {
        "name": "separator",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "intersperse",
    "returns": [
      "Array"
    ],
    "sig": "a -> [a] -> [a]",
    "description": "Creates a new list with the separator interposed between elements.\n\nDispatches to the `intersperse` method of the second argument, if present."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "name": "last",
    "returns": [
      "*"
    ],
    "sig": "[a] -> a | Undefined",
    "description": "Returns the last element of the given list or string."
  },
  {
    "args": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "xs",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "lastIndexOf",
    "returns": [
      "Number"
    ],
    "sig": "a -> [a] -> Number",
    "description": "Returns the position of the last occurrence of an item in\nan array, or -1 if the item is not included in the array.\n`R.equals` is used to determine equality."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array",
          "Object"
        ]
      }
    ],
    "name": "map",
    "returns": [
      "Array",
      "Object"
    ],
    "sig": "Functor f => (a -> b) -> f a -> f b",
    "description": "Returns a new list, constructed by applying the supplied function to every\nelement of the supplied list.\n\nNote: `R.map` does not skip deleted or unassigned indices (sparse arrays),\nunlike the native `Array.prototype.map` method. For more details on this\nbehavior, see:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Description\n\nDispatches to the `map` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position.\n\nAlso treats functions as functors and will compose them together."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "none",
    "returns": [
      "Boolean"
    ],
    "sig": "(a -> Boolean) -> [a] -> Boolean",
    "description": "Returns `true` if no elements of the list match the predicate,\n`false` otherwise.\n\nDispatches to the `any` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "partition",
    "returns": [
      "Array"
    ],
    "sig": "(a -> Boolean) -> [a] -> [[a],[a]]",
    "description": "Takes a predicate and a list and returns the pair of lists of\nelements which do and do not satisfy the predicate, respectively."
  },
  {
    "args": [
      {
        "name": "key",
        "types": [
          "Number",
          "String"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "pluck",
    "returns": [
      "Array"
    ],
    "sig": "k -> [{k: v}] -> [v]",
    "description": "Returns a new list by plucking the same named property off all objects in the list supplied."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "acc",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "reduce",
    "returns": [
      "*"
    ],
    "sig": "(a,b -> a) -> a -> [b] -> a",
    "description": "Returns a single item by iterating through the list, successively calling the iterator\nfunction and passing it an accumulator value and the current value from the array, and\nthen passing the result to the next call.\n\nThe iterator function receives two values: *(acc, value)*.  It may use `R.reduced` to\nshortcut the iteration.\n\nNote: `R.reduce` does not skip deleted or unassigned indices (sparse arrays), unlike\nthe native `Array.prototype.reduce` method. For more details on this behavior, see:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description"
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "reject",
    "returns": [
      "Array"
    ],
    "sig": "(a -> Boolean) -> [a] -> [a]",
    "description": "Similar to `filter`, except that it keeps only values for which the given predicate\nfunction returns falsy. The predicate function is passed one argument: *(value)*.\n\nDispatches to the `filter` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "n",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "repeat",
    "returns": [
      "Array"
    ],
    "sig": "a -> n -> [a]",
    "description": "Returns a fixed list of size `n` containing a specified identical value."
  },
  {
    "args": [
      {
        "name": "fromIndex",
        "types": [
          "Number"
        ]
      },
      {
        "name": "toIndex",
        "types": [
          "Number"
        ]
      },
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "name": "slice",
    "returns": [
      "*"
    ],
    "sig": "Number -> Number -> [a] -> [a]",
    "description": "Returns the elements of the given list or string (or object with a `slice`\nmethod) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n\nDispatches to the `slice` method of the third argument, if present."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array",
          "String"
        ]
      }
    ],
    "name": "splitEvery",
    "returns": [
      "Array"
    ],
    "sig": "Number -> [a] -> [[a]]",
    "description": "Splits a collection into slices of the specified length."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "name": "tail",
    "returns": [
      "*"
    ],
    "sig": "[a] -> [a]",
    "description": "Returns all but the first element of the given list or string (or object\nwith a `tail` method).\n\nDispatches to the `slice` method of the first argument, if present."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array",
          "String"
        ]
      }
    ],
    "name": "take",
    "returns": [
      "Array",
      "String"
    ],
    "sig": "Number -> [a] -> [a]",
    "description": "Returns the first `n` elements of the given `list`.\n\nDispatches to the `take` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "takeWhile",
    "returns": [
      "Array"
    ],
    "sig": "(a -> Boolean) -> [a] -> [a]",
    "description": "Returns a new list containing the first `n` elements of a given list, passing each value\nto the supplied predicate function, and terminating when the predicate function returns\n`false`. Excludes the element that caused the predicate function to fail. The predicate\nfunction is passed one argument: *(value)*.\n\nDispatches to the `takeWhile` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "xf",
        "types": [
          "Function"
        ]
      },
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "acc",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "transduce",
    "returns": [
      "*"
    ],
    "sig": "(c -> c) -> (a,b -> a) -> a -> [b] -> a",
    "description": "Initializes a transducer using supplied iterator function. Returns a single item by\niterating through the list, successively calling the transformed iterator function and\npassing it an accumulator value and the current value from the array, and then passing\nthe result to the next call.\n\nThe iterator function receives two values: *(acc, value)*. It will be wrapped as a\ntransformer to initialize the transducer. A transformer can be passed directly in place\nof an iterator function.  In both cases, iteration may be stopped early with the\n`R.reduced` function.\n\nA transducer is a function that accepts a transformer and returns a transformer and can\nbe composed directly.\n\nA transformer is an an object that provides a 2-arity reducing iterator function, step,\n0-arity initial value function, init, and 1-arity result extraction function, result.\nThe step function is used as the iterator function in reduce. The result function is used\nto convert the final accumulator into the return type and in most cases is R.identity.\nThe init function can be used to provide an initial accumulator, but is ignored by transduce.\n\nThe iteration is performed with R.reduce after initializing the transducer."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "uniq",
    "returns": [
      "Array"
    ],
    "sig": "[a] -> [a]",
    "description": "Returns a new list containing only one copy of each element in the original list.\n`R.equals` is used to determine equality."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "allUniq",
    "returns": [
      "Boolean"
    ],
    "sig": "[a] -> Boolean",
    "description": "Returns `true` if all elements are unique, in `R.equals` terms,\notherwise `false`."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "chain",
    "returns": [
      "Array"
    ],
    "sig": "(a -> [b]) -> [a] -> [b]",
    "description": "`chain` maps a function over a list and concatenates the results.\n`chain` is also known as `flatMap` in some libraries\n\nDispatches to the `chain` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "of",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "commuteMap",
    "returns": [
      "*"
    ],
    "sig": "Functor f => (a -> f b) -> (x -> f x) -> [a] -> f [b]",
    "description": "Turns a list of Functors into a Functor of a list, applying\na mapping function to the elements of the list along the way."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array",
          "String"
        ]
      }
    ],
    "name": "drop",
    "returns": [
      "Array",
      "String"
    ],
    "sig": "Number -> [a] -> [a]",
    "description": "Returns all but the first `n` elements of the given `list`.\n\nDispatches to the `drop` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      },
      {
        "name": "xs",
        "types": [
          "Array",
          "String"
        ]
      }
    ],
    "name": "dropLast",
    "returns": [
      "Array",
      "String"
    ],
    "sig": "Number -> [a] -> [a]",
    "description": "Returns a list containing all but the last `n` elements of the given `list`.\n\nDispatches to the `dropLast` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "dropRepeatsWith",
    "returns": [
      "Array"
    ],
    "sig": "(a, a -> Boolean) -> [a] -> [a]",
    "description": "Returns a new list without any consecutively repeating elements. Equality is\ndetermined by applying the supplied predicate two consecutive elements.\nThe first element in a series of equal element is the one being preserved.\n\nDispatches to the `dropRepeatsWith` method of the second argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      },
      {
        "name": "xs",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "indexOf",
    "returns": [
      "Number"
    ],
    "sig": "a -> [a] -> Number",
    "description": "Returns the position of the first occurrence of an item in an array,\nor -1 if the item is not included in the array. `R.equals` is used to\ndetermine equality."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "name": "init",
    "returns": [
      "*"
    ],
    "sig": "[a] -> [a]",
    "description": "Returns all but the last element of the given list or string."
  },
  {
    "args": [
      {
        "name": "acc",
        "types": [
          "*"
        ]
      },
      {
        "name": "xf",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "into",
    "returns": [
      "*"
    ],
    "sig": "a -> (b -> b) -> [c] -> a",
    "description": "Transforms the items of the list with the transducer and appends the transformed items to\nthe accumulator using an appropriate iterator function based on the accumulator type.\n\nThe accumulator can be an array, string, object or a transformer. Iterated items will\nbe appended to arrays and concatenated to strings. Objects will be merged directly or 2-item\narrays will be merged as key, value pairs.\n\nThe accumulator can also be a transformer object that provides a 2-arity reducing iterator\nfunction, step, 0-arity initial value function, init, and 1-arity result extraction function\nresult. The step function is used as the iterator function in reduce. The result function is\nused to convert the final accumulator into the return type and in most cases is R.identity.\nThe init function is used to provide the initial accumulator.\n\nThe iteration is performed with R.reduce after initializing the transducer.\n\nDispatches to the `reduce` method of the third argument, if present."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "isSet",
    "returns": [
      "Boolean"
    ],
    "sig": "[a] -> Boolean",
    "description": "Returns `true` if all elements are unique, in `R.equals` terms,\notherwise `false`."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "mergeAll",
    "returns": [
      "Object"
    ],
    "sig": "[{k: v}] -> {k: v}",
    "description": "Merges a list of objects together into one object."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      },
      {
        "name": "xs",
        "types": [
          "Array",
          "String"
        ]
      }
    ],
    "name": "takeLast",
    "returns": [
      "Array",
      "String"
    ],
    "sig": "Number -> [a] -> [a]",
    "description": "Returns a new list containing the last `n` elements of the given list.\nIf `n > list.length`, returns a list of `list.length` elements."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "*"
        ]
      }
    ],
    "name": "unnest",
    "returns": [
      "*"
    ],
    "sig": "Chain c => c (c a) -> c a",
    "description": "Shorthand for `R.chain(R.identity)`, which removes one level of nesting\nfrom any [Chain](https://github.com/fantasyland/fantasy-land#chain)."
  },
  {
    "args": [
      {
        "name": "of",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "commute",
    "returns": [
      "*"
    ],
    "sig": "Functor f => (x -> f x) -> [f a] -> f [a]",
    "description": "Turns a list of Functors into a Functor of a list."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "contains",
    "returns": [
      "Boolean"
    ],
    "sig": "a -> [a] -> Boolean",
    "description": "Returns `true` if the specified value is equal, in `R.equals` terms,\nto at least one element of the given list; `false` otherwise."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "dropRepeats",
    "returns": [
      "Array"
    ],
    "sig": "[a] -> [a]",
    "description": "Returns a new list without any consecutively repeating elements.\n`R.equals` is used to determine equality.\n\nDispatches to the `dropRepeats` method of the first argument, if present.\n\nActs as a transducer if a transformer is given in list position."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "uniqBy",
    "returns": [
      "Array"
    ],
    "sig": "(a -> b) -> [a] -> [a]",
    "description": "Returns a new list containing only one copy of each element in the\noriginal list, based upon the value returned by applying the supplied\nfunction to each list element. Prefers the first item if the supplied\nfunction produces the same value on two items. `R.equals` is used for\ncomparison."
  },
  {
    "args": [
      {
        "name": "separator",
        "types": [
          "Number",
          "String"
        ]
      },
      {
        "name": "xs",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "join",
    "returns": [
      "String"
    ],
    "sig": "String -> [a] -> String",
    "description": "Returns a string made by inserting the `separator` between each\nelement and concatenating all the elements into a single string."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Array",
          "String",
          "Object"
        ]
      },
      {
        "name": "b",
        "types": [
          "Array",
          "String",
          "Object"
        ]
      }
    ],
    "name": "concat",
    "returns": [
      "Array",
      "String"
    ],
    "sig": "[a] -> [a] -> [a]",
    "description": "Returns the result of concatenating the given lists or strings.\n\nDispatches to the `concat` method of the first argument, if present."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Boolean"
        ]
      },
      {
        "name": "b",
        "types": [
          "Boolean"
        ]
      }
    ],
    "name": "and",
    "returns": [
      "Boolean"
    ],
    "sig": "* -> * -> *",
    "description": "Returns `true` if both arguments are `true`; `false` otherwise."
  },
  {
    "args": [
      {
        "name": "pairs",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "cond",
    "returns": [
      "Function"
    ],
    "sig": "[[(*... -> Boolean),(*... -> *)]] -> (*... -> *)",
    "description": "Returns a function, `fn`, which encapsulates if/else-if/else logic.\n`R.cond` takes a list of [predicate, transform] pairs. All of the\narguments to `fn` are applied to each of the predicates in turn\nuntil one returns a \"truthy\" value, at which point `fn` returns the\nresult of applying its arguments to the corresponding transformer.\nIf none of the predicates matches, `fn` returns undefined."
  },
  {
    "args": [
      {
        "name": "def",
        "types": [
          "*"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "name": "defaultTo",
    "returns": [
      "*"
    ],
    "sig": "a -> b -> a | b",
    "description": "Returns the second argument if it is not `null`, `undefined` or `NaN`\notherwise the first argument is returned."
  },
  {
    "args": [
      {
        "name": "condition",
        "types": [
          "Function"
        ]
      },
      {
        "name": "onTrue",
        "types": [
          "Function"
        ]
      },
      {
        "name": "onFalse",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "ifElse",
    "returns": [
      "Function"
    ],
    "sig": "(*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)",
    "description": "Creates a function that will process either the `onTrue` or the `onFalse` function depending\nupon the result of the `condition` predicate."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      }
    ],
    "name": "not",
    "returns": [
      "Boolean"
    ],
    "sig": "* -> Boolean",
    "description": "A function that returns the `!` of its argument. It will return `true` when\npassed false-y value, and `false` when passed a truth-y one."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Boolean"
        ]
      },
      {
        "name": "b",
        "types": [
          "Boolean"
        ]
      }
    ],
    "name": "or",
    "returns": [
      "Boolean"
    ],
    "sig": "* -> * -> *",
    "description": "Returns `true` if one or both of its arguments are `true`. Returns `false`\nif both arguments are `false`."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "name",
        "types": [
          "String"
        ]
      },
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "name": "propSatisfies",
    "returns": [
      "Boolean"
    ],
    "sig": "(a -> Boolean) -> String -> {String: a} -> Boolean",
    "description": "Returns `true` if the specified object property satisfies the given\npredicate; `false` otherwise."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "whenFalseFn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "unless",
    "returns": [
      "*"
    ],
    "sig": "(a -> Boolean) -> (a -> a) -> a -> a",
    "description": "Tests the final argument by passing it to the given predicate function.\nIf the predicate is not satisfied, the function will return the\nresult of calling the `whenFalseFn` function with the same argument. If the\npredicate is satisfied, the argument is returned as is."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "whenTrueFn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "when",
    "returns": [
      "*"
    ],
    "sig": "(a -> Boolean) -> (a -> a) -> a -> a",
    "description": "Tests the final argument by passing it to the given predicate function.\nIf the predicate is satisfied, the function will return the result\nof calling the `whenTrueFn` function with the same argument. If the predicate\nis not satisfied, the argument is returned as is."
  },
  {
    "args": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "isEmpty",
    "returns": [
      "Boolean"
    ],
    "sig": "a -> Boolean",
    "description": "Returns `true` if the given value is its type's empty value; `false`\notherwise."
  },
  {
    "args": [
      {
        "name": "preds",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "allPass",
    "returns": [
      "Function"
    ],
    "sig": "[(*... -> Boolean)] -> (*... -> Boolean)",
    "description": "Takes a list of predicates and returns a predicate that returns true\nfor a given list of arguments if every one of the provided predicates\nis satisfied by those arguments.\n\nThe function returned is a curried function whose arity matches that of\nthe highest-arity predicate."
  },
  {
    "args": [
      {
        "name": "preds",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "anyPass",
    "returns": [
      "Function"
    ],
    "sig": "[(*... -> Boolean)] -> (*... -> Boolean)",
    "description": "Takes a list of predicates and returns a predicate that returns true for\na given list of arguments if at least one of the provided predicates is\nsatisfied by those arguments.\n\nThe function returned is a curried function whose arity matches that of\nthe highest-arity predicate."
  },
  {
    "args": [
      {
        "name": "f",
        "types": [
          "Function"
        ]
      },
      {
        "name": "g",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "both",
    "returns": [
      "Function"
    ],
    "sig": "(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)",
    "description": "A function wrapping calls to the two functions in an `&&` operation, returning the result of the first\nfunction if it is false-y and the result of the second function otherwise.\n\n`R.both` will work on all other applicatives as well."
  },
  {
    "args": [
      {
        "name": "f",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "complement",
    "returns": [
      "Function"
    ],
    "sig": "(*... -> *) -> (*... -> Boolean)",
    "description": "Takes a function `f` and returns a function `g` such that:\n\n  - applying `g` to zero or more arguments will give __true__ if applying\n    the same arguments to `f` gives a logical __false__ value; and\n\n  - applying `g` to zero or more arguments will give __false__ if applying\n    the same arguments to `f` gives a logical __true__ value.\n\n`R.complement` will work on all other functors as well."
  },
  {
    "args": [
      {
        "name": "f",
        "types": [
          "Function"
        ]
      },
      {
        "name": "g",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "either",
    "returns": [
      "Function"
    ],
    "sig": "(*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)",
    "description": "A function wrapping calls to the two functions in an `||` operation, returning the result of the first\nfunction if it is truth-y and the result of the second function otherwise.\n\n`R.either` will work on all other applicatives as well."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Number"
        ]
      },
      {
        "name": "b",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "add",
    "returns": [
      "Number"
    ],
    "sig": "Number -> Number -> Number",
    "description": "Adds two numbers. Equivalent to `a + b` but curried."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "dec",
    "returns": [
      "Number"
    ],
    "sig": "Number -> Number",
    "description": "Decrements its argument."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Number"
        ]
      },
      {
        "name": "b",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "divide",
    "returns": [
      "Number"
    ],
    "sig": "Number -> Number -> Number",
    "description": "Divides two numbers. Equivalent to `a / b`."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "inc",
    "returns": [
      "Number"
    ],
    "sig": "Number -> Number",
    "description": "Increments its argument."
  },
  {
    "args": [
      {
        "name": "m",
        "types": [
          "Number"
        ]
      },
      {
        "name": "p",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "mathMod",
    "returns": [
      "Number"
    ],
    "sig": "Number -> Number -> Number",
    "description": "mathMod behaves like the modulo operator should mathematically, unlike the `%`\noperator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\nmathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\nwhen the modulus is zero or negative."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Number"
        ]
      },
      {
        "name": "b",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "modulo",
    "returns": [
      "Number"
    ],
    "sig": "Number -> Number -> Number",
    "description": "Divides the second parameter by the first and returns the remainder.\nNote that this function preserves the JavaScript-style behavior for\nmodulo. For mathematical modulo see `mathMod`."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Number"
        ]
      },
      {
        "name": "b",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "multiply",
    "returns": [
      "Number"
    ],
    "sig": "Number -> Number -> Number",
    "description": "Multiplies two numbers. Equivalent to `a * b` but curried."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "negate",
    "returns": [
      "Number"
    ],
    "sig": "Number -> Number",
    "description": "Negates its argument."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Number"
        ]
      },
      {
        "name": "b",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "subtract",
    "returns": [
      "Number"
    ],
    "sig": "Number -> Number -> Number",
    "description": "Subtracts two numbers. Equivalent to `a - b` but curried."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "sum",
    "returns": [
      "Number"
    ],
    "sig": "[Number] -> Number",
    "description": "Adds together all the elements of a list."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "mean",
    "returns": [
      "Number"
    ],
    "sig": "[Number] -> Number",
    "description": "Returns the mean of the given list of numbers."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "median",
    "returns": [
      "Number"
    ],
    "sig": "[Number] -> Number",
    "description": "Returns the median of the given list of numbers."
  },
  {
    "args": [
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "product",
    "returns": [
      "Number"
    ],
    "sig": "[Number] -> Number",
    "description": "Multiplies together all the elements of a list."
  },
  {
    "args": [
      {
        "name": "prop",
        "types": [
          "String"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "assoc",
    "returns": [
      "Object"
    ],
    "sig": "String -> a -> {k: v} -> {k: v}",
    "description": "Makes a shallow clone of an object, setting or overriding the specified\nproperty with the given value.  Note that this copies and flattens\nprototype properties onto the new object as well.  All non-primitive\nproperties are copied by reference."
  },
  {
    "args": [
      {
        "name": "path",
        "types": [
          "Array"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "assocPath",
    "returns": [
      "Object"
    ],
    "sig": "[String] -> a -> {k: v} -> {k: v}",
    "description": "Makes a shallow clone of an object, setting or overriding the nodes\nrequired to create the given path, and placing the specific value at the\ntail end of that path.  Note that this copies and flattens prototype\nproperties onto the new object as well.  All non-primitive properties\nare copied by reference."
  },
  {
    "args": [
      {
        "name": "prop",
        "types": [
          "String"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "dissoc",
    "returns": [
      "Object"
    ],
    "sig": "String -> {k: v} -> {k: v}",
    "description": "Returns a new object that does not contain a `prop` property."
  },
  {
    "args": [
      {
        "name": "path",
        "types": [
          "Array"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "dissocPath",
    "returns": [
      "Object"
    ],
    "sig": "[String] -> {k: v} -> {k: v}",
    "description": "Makes a shallow clone of an object, omitting the property at the\ngiven path. Note that this copies and flattens prototype properties\nonto the new object as well.  All non-primitive properties are copied\nby reference."
  },
  {
    "args": [
      {
        "name": "transformations",
        "types": [
          "Object"
        ]
      },
      {
        "name": "object",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "evolve",
    "returns": [
      "Object"
    ],
    "sig": "{k: (v -> v)} -> {k: v} -> {k: v}",
    "description": "Creates a new object by recursively evolving a shallow copy of `object`, according to the\n`transformation` functions. All non-primitive properties are copied by reference.\n\nA `transformation` function will not be invoked if its corresponding key does not exist in\nthe evolved object."
  },
  {
    "args": [
      {
        "name": "prop",
        "types": [
          "String"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "has",
    "returns": [
      "Boolean"
    ],
    "sig": "s -> {s: x} -> Boolean",
    "description": "Returns whether or not an object has an own property with\nthe specified name"
  },
  {
    "args": [
      {
        "name": "prop",
        "types": [
          "String"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "hasIn",
    "returns": [
      "Boolean"
    ],
    "sig": "s -> {s: x} -> Boolean",
    "description": "Returns whether or not an object or its prototype chain has\na property with the specified name"
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "keys",
    "returns": [
      "Array"
    ],
    "sig": "{k: v} -> [k]",
    "description": "Returns a list containing the names of all the enumerable own\nproperties of the supplied object.\nNote that the order of the output array is not guaranteed to be\nconsistent across different JS platforms."
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "keysIn",
    "returns": [
      "Array"
    ],
    "sig": "{k: v} -> [k]",
    "description": "Returns a list containing the names of all the\nproperties of the supplied object, including prototype properties.\nNote that the order of the output array is not guaranteed to be\nconsistent across different JS platforms."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Object"
        ]
      },
      {
        "name": "b",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "merge",
    "returns": [
      "Object"
    ],
    "sig": "{k: v} -> {k: v} -> {k: v}",
    "description": "Create a new object with the own properties of `a`\nmerged with the own properties of object `b`."
  },
  {
    "args": [
      {
        "name": "key",
        "types": [
          "String"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "name": "objOf",
    "returns": [
      "Object"
    ],
    "sig": "String -> a -> {String:a}",
    "description": "Creates an object containing a single key:value pair."
  },
  {
    "args": [
      {
        "name": "lens",
        "types": [
          "Lens"
        ]
      },
      {
        "name": "v",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "over",
    "returns": [
      "*"
    ],
    "sig": "Lens s a -> (a -> a) -> s -> s",
    "description": "Returns the result of \"setting\" the portion of the given data structure\nfocused by the given lens to the result of applying the given function to\nthe focused value."
  },
  {
    "args": [
      {
        "name": "path",
        "types": [
          "Array"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object",
          "*"
        ]
      }
    ],
    "name": "path",
    "returns": [
      "*"
    ],
    "sig": "[String] -> {k: v} -> v | Undefined",
    "description": "Retrieve the value at a given path."
  },
  {
    "args": [
      {
        "name": "d",
        "types": [
          "*"
        ]
      },
      {
        "name": "p",
        "types": [
          "Array"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object",
          "*"
        ]
      }
    ],
    "name": "pathOr",
    "returns": [
      "*"
    ],
    "sig": "a -> [String] -> Object -> a",
    "description": "If the given, non-null object has a value at the given path, returns the\nvalue at that path. Otherwise returns the provided default value."
  },
  {
    "args": [
      {
        "name": "names",
        "types": [
          "Array"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "pick",
    "returns": [
      "Object"
    ],
    "sig": "[k] -> {k: v} -> {k: v}",
    "description": "Returns a partial copy of an object containing only the keys specified.  If the key does not exist, the\nproperty is ignored."
  },
  {
    "args": [
      {
        "name": "names",
        "types": [
          "Array"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "pickAll",
    "returns": [
      "Object"
    ],
    "sig": "[k] -> {k: v} -> {k: v}",
    "description": "Similar to `pick` except that this one includes a `key: undefined` pair for properties that don't exist."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "pickBy",
    "returns": [
      "Object"
    ],
    "sig": "(v, k -> Boolean) -> {k: v} -> {k: v}",
    "description": "Returns a partial copy of an object containing only the keys that\nsatisfy the supplied predicate."
  },
  {
    "args": [
      {
        "name": "p",
        "types": [
          "String"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "prop",
    "returns": [
      "*"
    ],
    "sig": "s -> {s: a} -> a | Undefined",
    "description": "Returns a function that when supplied an object returns the indicated property of that object, if it exists."
  },
  {
    "args": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      },
      {
        "name": "p",
        "types": [
          "String"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object",
          "*"
        ]
      }
    ],
    "name": "propOr",
    "returns": [
      "*"
    ],
    "sig": "a -> String -> Object -> a",
    "description": "If the given, non-null object has an own property with the specified name,\nreturns the value of that property.\nOtherwise returns the provided default value."
  },
  {
    "args": [
      {
        "name": "ps",
        "types": [
          "Array"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "props",
    "returns": [
      "Array"
    ],
    "sig": "[k] -> {k: v} -> [v]",
    "description": "Acts as multiple `prop`: array of keys in, array of values out. Preserves order."
  },
  {
    "args": [
      {
        "name": "lens",
        "types": [
          "Lens"
        ]
      },
      {
        "name": "v",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "set",
    "returns": [
      "*"
    ],
    "sig": "Lens s a -> a -> s -> s",
    "description": "Returns the result of \"setting\" the portion of the given data structure\nfocused by the given lens to the given value."
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "toPairs",
    "returns": [
      "Array"
    ],
    "sig": "{String: *} -> [[String,*]]",
    "description": "Converts an object into an array of key, value arrays.\nOnly the object's own properties are used.\nNote that the order of the output array is not guaranteed to be\nconsistent across different JS platforms."
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "toPairsIn",
    "returns": [
      "Array"
    ],
    "sig": "{String: *} -> [[String,*]]",
    "description": "Converts an object into an array of key, value arrays.\nThe object's own properties and prototype properties are used.\nNote that the order of the output array is not guaranteed to be\nconsistent across different JS platforms."
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "values",
    "returns": [
      "Array"
    ],
    "sig": "{k: v} -> [v]",
    "description": "Returns a list of all the enumerable own properties of the supplied object.\nNote that the order of the output array is not guaranteed across\ndifferent JS platforms."
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "valuesIn",
    "returns": [
      "Array"
    ],
    "sig": "{k: v} -> [v]",
    "description": "Returns a list of all the properties, including prototype properties,\nof the supplied object.\nNote that the order of the output array is not guaranteed to be\nconsistent across different JS platforms."
  },
  {
    "args": [
      {
        "name": "lens",
        "types": [
          "Lens"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "view",
    "returns": [
      "*"
    ],
    "sig": "Lens s a -> s -> a",
    "description": "Returns a \"view\" of the given data structure, determined by the given lens.\nThe lens's focus determines which portion of the data structure is visible."
  },
  {
    "args": [
      {
        "name": "spec",
        "types": [
          "Object"
        ]
      },
      {
        "name": "testObj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "where",
    "returns": [
      "Boolean"
    ],
    "sig": "{String: (* -> Boolean)} -> {String: *} -> Boolean",
    "description": "Takes a spec object and a test object; returns true if the test satisfies\nthe spec. Each of the spec's own properties must be a predicate function.\nEach predicate is applied to the value of the corresponding property of\nthe test object. `where` returns true if all the predicates return true,\nfalse otherwise.\n\n`where` is well suited to declaratively expressing constraints for other\nfunctions such as `filter` and `find`."
  },
  {
    "args": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "name": "clone",
    "returns": [
      "*"
    ],
    "sig": "{*} -> {*}",
    "description": "Creates a deep copy of the value which may contain (nested) `Array`s and `Object`s, `Number`s,\n`String`s, `Boolean`s and `Date`s. `Function`s are not copied, but assigned by their\nreference. Dispatches to a `clone` method if present."
  },
  {
    "args": [
      {
        "name": "key",
        "types": [
          "String"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "name": "createMapEntry",
    "returns": [
      "Object"
    ],
    "sig": "String -> a -> {String:a}",
    "description": "Creates an object containing a single key:value pair."
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "functions",
    "returns": [
      "Array"
    ],
    "sig": "{*} -> [String]",
    "description": "Returns a list of function names of object's own functions"
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "functionsIn",
    "returns": [
      "Array"
    ],
    "sig": "{*} -> [String]",
    "description": "Returns a list of function names of object's own and prototype functions"
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "invert",
    "returns": [
      "Object"
    ],
    "sig": "{s: x} -> {x: [ s, ... ]}",
    "description": "Same as R.invertObj, however this accounts for objects\nwith duplicate values by putting the values into an\narray."
  },
  {
    "args": [
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "invertObj",
    "returns": [
      "Object"
    ],
    "sig": "{s: x} -> {x: s}",
    "description": "Returns a new object with the keys of the given object\nas values, and the values of the given object, which are\ncoerced to strings, as keys.\nNote that the last key found is preferred when handling\nthe same value."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "mapObj",
    "returns": [
      "Object"
    ],
    "sig": "(v -> v) -> {k: v} -> {k: v}",
    "description": "Map, but for objects. Creates an object with the same keys as `obj` and values\ngenerated by running each property of `obj` through `fn`. `fn` is passed one argument:\n*(value)*."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "mapObjIndexed",
    "returns": [
      "Object"
    ],
    "sig": "(v, k, {k: v} -> v) -> {k: v} -> {k: v}",
    "description": "Like `mapObj`, but passes additional arguments to the predicate function. The\npredicate function is passed three arguments: *(value, key, obj)*."
  },
  {
    "args": [
      {
        "name": "spec",
        "types": [
          "Object"
        ]
      },
      {
        "name": "testObj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "whereEq",
    "returns": [
      "Boolean"
    ],
    "sig": "{String: *} -> {String: *} -> Boolean",
    "description": "Takes a spec object and a test object; returns true if the test satisfies\nthe spec, false otherwise. An object satisfies the spec if, for each of the\nspec's own properties, accessing that property of the object gives the same\nvalue (in `R.equals` terms) as accessing that property of the spec.\n\n`whereEq` is a specialization of [`where`](#where)."
  },
  {
    "args": [
      {
        "name": "prop",
        "types": [
          "String"
        ]
      },
      {
        "name": "obj1",
        "types": [
          "Object"
        ]
      },
      {
        "name": "obj2",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "eqProps",
    "returns": [
      "Boolean"
    ],
    "sig": "k -> {k: v} -> {k: v} -> Boolean",
    "description": "Reports whether two objects have the same value, in `R.equals` terms,\nfor the specified property. Useful as a curried predicate."
  },
  {
    "args": [
      {
        "name": "getter",
        "types": [
          "Function"
        ]
      },
      {
        "name": "setter",
        "types": [
          "Function"
        ]
      }
    ],
    "name": "lens",
    "returns": [
      "Lens"
    ],
    "sig": "(s -> a) -> ((a, s) -> s) -> Lens s a",
    "description": "Returns a lens for the given getter and setter functions. The getter \"gets\"\nthe value of the focus; the setter \"sets\" the value of the focus. The setter\nshould not mutate the data structure."
  },
  {
    "args": [
      {
        "name": "n",
        "types": [
          "Number"
        ]
      }
    ],
    "name": "lensIndex",
    "returns": [
      "Lens"
    ],
    "sig": "Number -> Lens s a",
    "description": "Returns a lens whose focus is the specified index."
  },
  {
    "args": [
      {
        "name": "k",
        "types": [
          "String"
        ]
      }
    ],
    "name": "lensProp",
    "returns": [
      "Lens"
    ],
    "sig": "String -> Lens s a",
    "description": "Returns a lens whose focus is the specified property."
  },
  {
    "args": [
      {
        "name": "props",
        "types": [
          "Array"
        ]
      },
      {
        "name": "objs",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "project",
    "returns": [
      "Array"
    ],
    "sig": "[k] -> [{k: v}] -> [{k: v}]",
    "description": "Reasonable analog to SQL `select` statement."
  },
  {
    "args": [
      {
        "name": "names",
        "types": [
          "Array"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "omit",
    "returns": [
      "Object"
    ],
    "sig": "[String] -> {String: *} -> {String: *}",
    "description": "Returns a partial copy of an object omitting the keys specified."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "countBy",
    "returns": [
      "Object"
    ],
    "sig": "(a -> String) -> [a] -> {*}",
    "description": "Counts the elements of a list according to how many match each value\nof a key generated by the supplied function. Returns an object\nmapping the keys produced by `fn` to the number of occurrences in\nthe list. Note that all keys are coerced to strings because of how\nJavaScript objects work."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list1",
        "types": [
          "Array"
        ]
      },
      {
        "name": "list2",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "differenceWith",
    "returns": [
      "Array"
    ],
    "sig": "(a,a -> Boolean) -> [a] -> [a] -> [a]",
    "description": "Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list.\nDuplication is determined according to the value returned by applying the supplied predicate to two list\nelements."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Number",
          "String"
        ]
      },
      {
        "name": "b",
        "types": [
          "Number",
          "String"
        ]
      }
    ],
    "name": "gt",
    "returns": [
      "Boolean"
    ],
    "sig": "Ord a => a -> a -> Boolean",
    "description": "Returns `true` if the first argument is greater than the second;\n`false` otherwise."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Number",
          "String"
        ]
      },
      {
        "name": "b",
        "types": [
          "Number",
          "String"
        ]
      }
    ],
    "name": "gte",
    "returns": [
      "Boolean"
    ],
    "sig": "Ord a => a -> a -> Boolean",
    "description": "Returns `true` if the first argument is greater than or equal to the second;\n`false` otherwise."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "name": "identical",
    "returns": [
      "Boolean"
    ],
    "sig": "a -> a -> Boolean",
    "description": "Returns true if its arguments are identical, false otherwise. Values are\nidentical if they reference the same memory. `NaN` is identical to `NaN`;\n`0` and `-0` are not identical."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Number",
          "String"
        ]
      },
      {
        "name": "b",
        "types": [
          "Number",
          "String"
        ]
      }
    ],
    "name": "lt",
    "returns": [
      "Boolean"
    ],
    "sig": "Ord a => a -> a -> Boolean",
    "description": "Returns `true` if the first argument is less than the second;\n`false` otherwise."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "Number",
          "String"
        ]
      },
      {
        "name": "b",
        "types": [
          "Number",
          "String"
        ]
      }
    ],
    "name": "lte",
    "returns": [
      "Boolean"
    ],
    "sig": "Ord a => a -> a -> Boolean",
    "description": "Returns `true` if the first argument is less than or equal to the second;\n`false` otherwise."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "name": "max",
    "returns": [
      "*"
    ],
    "sig": "Ord a => a -> a -> a",
    "description": "Returns the larger of its two arguments."
  },
  {
    "args": [
      {
        "name": "f",
        "types": [
          "Function"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "name": "maxBy",
    "returns": [
      "*"
    ],
    "sig": "Ord b => (a -> b) -> a -> a -> a",
    "description": "Takes a function and two values, and returns whichever value produces\nthe larger result when passed to the provided function."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "name": "min",
    "returns": [
      "*"
    ],
    "sig": "Ord a => a -> a -> a",
    "description": "Returns the smaller of its two arguments."
  },
  {
    "args": [
      {
        "name": "f",
        "types": [
          "Function"
        ]
      },
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "name": "minBy",
    "returns": [
      "*"
    ],
    "sig": "Ord b => (a -> b) -> a -> a -> a",
    "description": "Takes a function and two values, and returns whichever value produces\nthe smaller result when passed to the provided function."
  },
  {
    "args": [
      {
        "name": "fn",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "sortBy",
    "returns": [
      "Array"
    ],
    "sig": "Ord b => (a -> b) -> [a] -> [a]",
    "description": "Sorts the list according to the supplied function."
  },
  {
    "args": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "name": "equals",
    "returns": [
      "Boolean"
    ],
    "sig": "a -> b -> Boolean",
    "description": "Returns `true` if its arguments are equivalent, `false` otherwise.\nDispatches to an `equals` method if present. Handles cyclical data\nstructures.\n\nDispatches to the `equals` method of both arguments, if present."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list1",
        "types": [
          "Array"
        ]
      },
      {
        "name": "list2",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "intersectionWith",
    "returns": [
      "Array"
    ],
    "sig": "(a,a -> Boolean) -> [a] -> [a] -> [a]",
    "description": "Combines two lists into a set (i.e. no duplicates) composed of those\nelements common to both lists.  Duplication is determined according\nto the value returned by applying the supplied predicate to two list\nelements."
  },
  {
    "args": [
      {
        "name": "path",
        "types": [
          "Array"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "Object"
        ]
      }
    ],
    "name": "pathEq",
    "returns": [
      "Boolean"
    ],
    "sig": "[String] -> * -> {String: *} -> Boolean",
    "description": "Determines whether a nested path on an object has a specific value,\nin `R.equals` terms. Most likely used to filter a list."
  },
  {
    "args": [
      {
        "name": "name",
        "types": [
          "String"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "name": "propEq",
    "returns": [
      "Boolean"
    ],
    "sig": "String -> a -> Object -> Boolean",
    "description": "Returns `true` if the specified object property is equal, in `R.equals`\nterms, to the given value; `false` otherwise."
  },
  {
    "args": [
      {
        "name": "pred",
        "types": [
          "Function"
        ]
      },
      {
        "name": "list1",
        "types": [
          "Array"
        ]
      },
      {
        "name": "list2",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "unionWith",
    "returns": [
      "Array"
    ],
    "sig": "(a,a -> Boolean) -> [a] -> [a] -> [a]",
    "description": "Combines two lists into a set (i.e. no duplicates) composed of the elements of each list.  Duplication is\ndetermined according to the value returned by applying the supplied predicate to two list elements."
  },
  {
    "args": [
      {
        "name": "f",
        "types": [
          "Function"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      }
    ],
    "name": "eqBy",
    "returns": [
      "Boolean"
    ],
    "sig": "(a -> b) -> a -> a -> Boolean",
    "description": "Takes a function and two values in its domain and returns `true` if\nthe values map to the same value in the codomain; `false` otherwise."
  },
  {
    "args": [
      {
        "name": "list1",
        "types": [
          "Array"
        ]
      },
      {
        "name": "list2",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "difference",
    "returns": [
      "Array"
    ],
    "sig": "[a] -> [a] -> [a]",
    "description": "Finds the set (i.e. no duplicates) of all elements in the first list not contained in the second list."
  },
  {
    "args": [
      {
        "name": "list1",
        "types": [
          "Array"
        ]
      },
      {
        "name": "list2",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "intersection",
    "returns": [
      "Array"
    ],
    "sig": "[a] -> [a] -> [a]",
    "description": "Combines two lists into a set (i.e. no duplicates) composed of those elements common to both lists."
  },
  {
    "args": [
      {
        "name": "as",
        "types": [
          "Array"
        ]
      },
      {
        "name": "bs",
        "types": [
          "Array"
        ]
      }
    ],
    "name": "union",
    "returns": [
      "Array"
    ],
    "sig": "[a] -> [a] -> [a]",
    "description": "Combines two lists into a set (i.e. no duplicates) composed of the\nelements of each list."
  },
  {
    "args": [
      {
        "name": "rx",
        "types": [
          "RegExp"
        ]
      },
      {
        "name": "str",
        "types": [
          "String"
        ]
      }
    ],
    "name": "match",
    "returns": [
      "Array"
    ],
    "sig": "RegExp -> String -> [String | Undefined]",
    "description": "Tests a regular expression against a String. Note that this function\nwill return an empty array when there are no matches. This differs\nfrom [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\nwhich returns `null` when there are no matches."
  },
  {
    "args": [
      {
        "name": "pattern",
        "types": [
          "RegExp",
          "String"
        ]
      },
      {
        "name": "replacement",
        "types": [
          "String"
        ]
      },
      {
        "name": "str",
        "types": [
          "String"
        ]
      }
    ],
    "name": "replace",
    "returns": [
      "String"
    ],
    "sig": "RegExp|String -> String -> String -> String",
    "description": "Replace a substring or regex match in a string with a replacement."
  },
  {
    "args": [
      {
        "name": "str",
        "types": [
          "String"
        ]
      }
    ],
    "name": "trim",
    "returns": [
      "String"
    ],
    "sig": "String -> String",
    "description": "Removes (strips) whitespace from both ends of the string."
  },
  {
    "args": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "name": "toString",
    "returns": [
      "String"
    ],
    "sig": "* -> String",
    "description": "Returns the string representation of the given value. `eval`'ing the output\nshould result in a value equivalent to the input value. Many of the built-in\n`toString` methods do not satisfy this requirement.\n\nIf the given value is an `[object Object]` with a `toString` method other\nthan `Object.prototype.toString`, this method is invoked with no arguments\nto produce the return value. This means user-defined constructor functions\ncan provide a suitable `toString` method. For example:\n\n    function Point(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    Point.prototype.toString = function() {\n      return 'new Point(' + this.x + ', ' + this.y + ')';\n    };\n\n    R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'"
  },
  {
    "args": [
      {
        "name": "sep",
        "types": [
          "String",
          "RegExp"
        ]
      },
      {
        "name": "str",
        "types": [
          "String"
        ]
      }
    ],
    "name": "split",
    "returns": [
      "Array"
    ],
    "sig": "(String | RegExp) -> String -> [String]",
    "description": "Splits a string into an array of strings based on the given\nseparator."
  },
  {
    "args": [
      {
        "name": "pattern",
        "types": [
          "RegExp"
        ]
      },
      {
        "name": "str",
        "types": [
          "String"
        ]
      }
    ],
    "name": "test",
    "returns": [
      "Boolean"
    ],
    "sig": "RegExp -> String -> Boolean",
    "description": "Determines whether a given string matches a given regular expression."
  },
  {
    "args": [
      {
        "name": "str",
        "types": [
          "String"
        ]
      }
    ],
    "name": "toLower",
    "returns": [
      "String"
    ],
    "sig": "String -> String",
    "description": "The lower case version of a string."
  },
  {
    "args": [
      {
        "name": "str",
        "types": [
          "String"
        ]
      }
    ],
    "name": "toUpper",
    "returns": [
      "String"
    ],
    "sig": "String -> String",
    "description": "The upper case version of a string."
  },
  {
    "args": [
      {
        "name": "ctor",
        "types": [
          "Function"
        ]
      },
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "name": "is",
    "returns": [
      "Boolean"
    ],
    "sig": "(* -> {*}) -> a -> Boolean",
    "description": "See if an object (`val`) is an instance of the supplied constructor.\nThis function will check up the inheritance chain, if any."
  },
  {
    "args": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "isArrayLike",
    "returns": [
      "Boolean"
    ],
    "sig": "* -> Boolean",
    "description": "Tests whether or not an object is similar to an array."
  },
  {
    "args": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "name": "isNil",
    "returns": [
      "Boolean"
    ],
    "sig": "* -> Boolean",
    "description": "Checks if the input value is `null` or `undefined`."
  },
  {
    "args": [
      {
        "name": "val",
        "types": [
          "*"
        ]
      }
    ],
    "name": "type",
    "returns": [
      "String"
    ],
    "sig": "(* -> {*}) -> String",
    "description": "Gives a single-word string description of the (native) type of a value, returning such\nanswers as 'Object', 'Number', 'Array', or 'Null'.  Does not attempt to distinguish user\nObject types any further, reporting them all as 'Object'."
  },
  {
    "args": [
      {
        "name": "type",
        "types": [
          "Function"
        ]
      },
      {
        "name": "name",
        "types": [
          "String"
        ]
      },
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "name": "propIs",
    "returns": [
      "Boolean"
    ],
    "sig": "Type -> String -> Object -> Boolean",
    "description": "Returns `true` if the specified object property is of the given type;\n`false` otherwise."
  }
]